
 * Algoritmos
 * Práctica 2
 * Carlos Torres (carlos.torres)
 * Daniel Vega (d.s.vega)
 * Grupo 4.3

 * Informe Práctica 2: Algoritmos de ordenación:
	En este experimento se evaluará empíricamente el rendimiento de un algoritmo de creación de montículos de mínimos a partir de vectores aleatorios
	y el rendimiento del algoritmo de ordenación por montículos usando el montículo creado por el algoritmo anterior.

	1.Características de la máquina: ----------------- 
                                     OS: Ubuntu 18.04.3 LTS x86_64 
                                     Kernel: 4.15.0-66-generic 
                                     CPU: Intel i5-7200U (4) @ 3.100GHz 
                                     Memoria Principal: 7886MiB
                                     -----------------
                                     Compilador: gcc 7.4.0

    2.Unidades de medida: Todos los tiempos se expresarán en microsegundos

	3.Método: Se determinarán los tiempos de ejecución de cada uno de los
	algoritmos, para vectores ordenados, ordenados al revés, y aleatorios,
	y con tamaños variables empezando en 500 elementos y siguiendo una
	progresión geométrica de razón 2.

	Se usarán 2 cotas (subestimada y sobreestimada) para afianzar los resultados
	de la cota ajustada.

	K = 1000 <- En caso de que el tiempo de una sola ejecución del algoritmo sea
	menor a 500, se calcula una media de K ejecuciones del algoritmo


  4. Resultados:

     t(n) es la función de tiempo del algoritmo en función del número de elementos
     del vector de entrada

	Creación de Montículos: 
		Vector de entrada ordenado:
								Cota subestimada:	Cota estimada:		Cotasobreestimada:
		       n			   t(n)		     t(n)/n^0.9		   t(n)/n^1.065	 	    t(n)/n^1.2
	(*)	     500		        51.7690		 0.192751058678		 0.069130026181		 0.029874852572
	(*)	    1000		       122.6680		 0.244754837653		 0.078294505324		 0.030812808478
	(*)	    2000		       280.3460		 0.299755643169		 0.085525853826		 0.030651968398
		    4000		       602.0000		 0.344939158118		 0.087781419706		 0.028649991778
		    8000		      1267.0000		 0.389041227272		 0.088305098385		 0.026246332750
		   16000		      2644.0000		 0.435064318532		 0.088079262442		 0.023840615945
		   32000		      5462.0000		 0.481633531805		 0.086969499125		 0.021437380764
		   64000		     11515.0000		 0.544129116461		 0.087635944169		 0.019671975440
		  128000		     24131.0000		 0.611063505231		 0.087780227480		 0.017944169217
		  256000		     50546.0000		 0.685915827397		 0.087884286251		 0.016360585231
		  512000		    105582.0000		 0.767797899283		 0.087743989334		 0.014875306784
	
		Vector de entrada ordenado al revés:
								Cota subestimada:	Cota estimada:		Cotasobreestimada:
		       n			   t(n)		     t(n)/n^0.8		   t(n)/n^1.065		     t(n)/n^1.2
	(*)	     500		        59.3450		 0.411346807170		 0.079246680518		 0.034246810366
	(*)	    1000		       135.6820		 0.540159771150		 0.086600866333		 0.034081777480
	(*)	    2000		       295.0690		 0.674682721836		 0.090017436177		 0.032261725380
		    4000		       617.0000		 0.810283827659		 0.089968664383		 0.029363862005
		    8000		      1300.0000		 0.980553654689		 0.090605073323		 0.026929938891
		   16000		      2703.0000		 1.170981569405		 0.090044722534		 0.024372611535
		   32000		      5603.0000		 1.394121547882		 0.089214592384		 0.021990780743
		   64000		     11831.0000		 1.690742521673		 0.090040890617		 0.020211822964
		  128000		     24741.0000		 2.030716387774		 0.089999196390		 0.018397774257
		  256000		     51488.0000		 2.427247431375		 0.089522140832		 0.016665489106
		  512000		    107744.0000		 2.917273358629		 0.089540720831		 0.015179908072
		 1024000		    225366.0000		 3.504680492147		 0.089519766905		 0.013820649354
		 2048000		    471943.0000		 4.215271838315		 0.089603123617		 0.012597768000
	
		Vector de entrada aleatorio:
								Cota subestimada:	Cota estimada:		Cotasobreestimada:
		       n			   t(n)		     t(n)/n^0.8		    t(n)/n^1.11		     t(n)/n^1.2
	(*)	     500		        69.7520		 0.483482390998		 0.072643173715		 0.040252481535
	(*)	    1000		       153.2480		 0.610091276730		 0.074198446988		 0.038494157186
	(*)	    2000		       333.5780		 0.762734523059		 0.075086049480		 0.036472153390
		    4000		       722.0000		 0.948176537390		 0.075554599386		 0.034360953594
		    8000		      1550.0000		 1.169121665206		 0.075407972241		 0.032108773293
		   16000		      3332.0000		 1.443474135871		 0.075361999376		 0.030044225541
		   32000		      7173.0000		 1.784764208988		 0.075424094468		 0.028152752146
		   64000		     15392.0000		 2.199637299770		 0.075243013954		 0.026295357878
		  128000		     33074.0000		 2.714680643839		 0.075165699880		 0.024594316550
		  256000		     71282.0000		 3.360376231419		 0.075313826716		 0.023072354616
		  512000		    152887.0000		 4.139563892010		 0.075097806487		 0.021540044972
	
	
	
	 (*) Tiempo promedio en 1000 ejecuciones del algoritmo
	
	
	
	5. Conclusión: Los cocientes del tiempo en función de n entre cotas ajustadas tienden a una
	constante

	> Para un vector ordenado, la cota ajustada del algoritmo de creación de montículos es O(n^1.065), cota superior
	  de t(n). Para un vector ordenado, la cota ajustada del algoritmo de ordenación por montículos es O(n^0.995*log2(n)), cota superior
	  de t(n)

      CREACIÓN DE MONTÍCULOS => t(n) = O(n^1.065)
		  ORDENACIÓN POR MONTÍCULOS => t(n) = O(n^0.995*log2(n))

	> Para un vector ordenado al revés (de forma decreciente), la cota ajustada del algoritmo de creación de montículos
	  es O(n^1.065), cota superior de t(n). Para un vector ordenado al revés, la cota ajustada del algoritmo de
	  ordenación por montículos es O(n*log2(n)), cota superior de t(n)

	  	CREACIÓN DE MONTÍCULOS => t(n) = O(n^1.065)
	  	ORDENACIÓN POR MONTÍCULOS => t(n) = O(n*log2(n))

	> Para un vector generado aleatoriamente, la cota ajustada del algoritmo de ordenación por inserción es
	  O(n^1.11), cota superior de t(n). Para un vector generado aleatoriamente, la cota superior del algoritmo
	  de ordenación por montículos es O(n^1.05*log2(n)), cota superior de t(n)

	     CREACIÓN DE MONTÍCULOS => t(n) = O(n^1.11)
       ORDENACIÓN POR MONTÍCULOS => t(n) = O(n^1.05*log2(n))

    Cabe destacar lo estable que son los algoritmo de creación de montículos y ordenación por montículos, ya que su complejidad apenas varía
    independientemente de si el vector de entrada estaba inicialmente ordenado, ordenado al revés o de forma aleatoria.

-----------------------------------------------------------------------------------------------------------------------	
