
 * Algoritmos
 * Práctica 2
 * Carlos Torres (carlos.torres)
 * Daniel Vega (d.s.vega)
 * Grupo 4.3

 * Informe Práctica 2: Algoritmos de ordenación:
	En este experimento se evaluará empíricamente el rendimiento de un algoritmo de creación de montículos de mínimos a partir de vectores aleatorios
	y el rendimiento del algoritmo de ordenación por montículos usando el montículo creado por el algoritmo anterior.

	1.Características de la máquina: ----------------- 
                                     OS: Ubuntu 18.04.3 LTS x86_64 
                                     Kernel: 4.15.0-66-generic 
                                     CPU: Intel i5-7200U (4) @ 3.100GHz 
                                     Memoria Principal: 7886MiB
                                     -----------------
                                     Compilador: gcc 7.4.0

    2.Unidades de medida: Todos los tiempos se expresarán en microsegundos

	3.Método: Se determinarán los tiempos de ejecución de cada uno de los
	algoritmos, para vectores ordenados, ordenados al revés, y aleatorios,
	y con tamaños variables empezando en 500 elementos y siguiendo una
	progresión geométrica de razón 2.

	Se usarán 2 cotas (subestimada y sobreestimada) para afianzar los resultados
	de la cota ajustada.

	K = 1000 <- En caso de que el tiempo de una sola ejecución del algoritmo sea
	menor a 500, se calcula una media de K ejecuciones del algoritmo


  4. Resultados:

     t(n) es la función de tiempo del algoritmo en función del número de elementos
     del vector de entrada

INSERTE AQUI LAS TABLAS BRUH

	5. Conclusión: Los cocientes del tiempo en función de n entre cotas ajustadas tienden a una
	constante

	> Para un vector ordenado, la cota ajustada del algoritmo de creación de montículos es O(n^1.065), cota superior
	  de t(n). Para un vector ordenado, la cota ajustada del algoritmo de ordenación por montículos es O(n^0.995*log2(n)), cota superior
	  de t(n)

      CREACIÓN DE MONTÍCULOS => t(n) = O(n^1.065)
		  ORDENACIÓN POR MONTÍCULOS => t(n) = O(n^0.995*log2(n))

	> Para un vector ordenado al revés (de forma decreciente), la cota ajustada del algoritmo de creación de montículos
	  es O(n^1.065), cota superior de t(n). Para un vector ordenado al revés, la cota ajustada del algoritmo de
	  ordenación por montículos es O(n*log2(n)), cota superior de t(n)

	  	CREACIÓN DE MONTÍCULOS => t(n) = O(n^1.065)
	  	ORDENACIÓN POR MONTÍCULOS => t(n) = O(n*log2(n))

	> Para un vector generado aleatoriamente, la cota ajustada del algoritmo de ordenación por inserción es
	  O(n^1.11), cota superior de t(n). Para un vector generado aleatoriamente, la cota superior del algoritmo
	  de ordenación por montículos es O(n^1.05*log2(n)), cota superior de t(n)

	     CREACIÓN DE MONTÍCULOS => t(n) = O(n^1.11)
       ORDENACIÓN POR MONTÍCULOS => t(n) = O(n^1.05*log2(n))

    En síntesis:

-----------------------------------------------------------------------------------------------------------------------	
